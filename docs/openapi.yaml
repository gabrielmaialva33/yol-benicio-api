openapi: 3.1.0
info:
  title: Yol Benício Legal Management API
  version: 2.0.0
  description: |
    ## Welcome to Yol Benício Legal Management System API

    A comprehensive legal management system API built with AdonisJS v6. This API provides robust functionality for managing legal processes, clients, folders, hearings, tasks, schedules, billing and user access control.

    ### Key Features

    - **JWT & Session Authentication**: Dual authentication system for API and web access
    - **Role-Based Access Control (RBAC)**: Fine-grained permissions with role inheritance
    - **Legal Process Management**: Complete folder, hearing, and task management
    - **Client Management**: Comprehensive client data and relationship management
    - **AI Integration**: Document analysis, generation, and semantic search capabilities
    - **Real-time Features**: Dashboard widgets, messages, and notifications
    - **File Management**: Secure file upload with cloud storage support
    - **Health Monitoring**: Built-in health check and readiness endpoints

    ## Authentication

    The API supports two authentication methods:

    ### 1. JWT Authentication (API Access)
    - **Login**: POST to `/api/v1/sessions/sign-in` with credentials
    - **Token**: Extract `access_token` from response
    - **Usage**: Include `Authorization: Bearer <token>` in headers
    - **Lifetime**: Access token: 1 hour, Refresh token: 3 days

    #### Postman Integration

    To automatically capture and store authentication tokens in Postman, add the following Post-Script to your login request:

    ```javascript
    // Postman Post-Script to capture tokens from response

    // Check if request was successful
    if (pm.response.code === 200 || pm.response.code === 201) {

        // Get response body as JSON
        const responseJson = pm.response.json();

        // Capture tokens from auth object
        if (responseJson.auth) {
            // Capture access token
            if (responseJson.auth.access_token) {
                pm.environment.set("accessToken", responseJson.auth.access_token);
                pm.environment.set("bearerToken", responseJson.auth.access_token);
                pm.collectionVariables.set("accessToken", responseJson.auth.access_token);
                pm.collectionVariables.set("bearerToken", responseJson.auth.access_token);
                console.log("Access Token saved:", responseJson.auth.access_token);
            }

            // Capture refresh token
            if (responseJson.auth.refresh_token) {
                pm.environment.set("refreshToken", responseJson.auth.refresh_token);
                pm.collectionVariables.set("refreshToken", responseJson.auth.refresh_token);
                console.log("Refresh Token saved:", responseJson.auth.refresh_token);
            }
        }

        // Capture user information
        if (responseJson.id) {
            pm.environment.set("userId", responseJson.id);
        }

        if (responseJson.email) {
            pm.environment.set("userEmail", responseJson.email);
        }

        if (responseJson.username) {
            pm.environment.set("username", responseJson.username);
        }

        if (responseJson.full_name) {
            pm.environment.set("userFullName", responseJson.full_name);
        }

        // Capture roles/permissions information
        if (responseJson.roles && responseJson.roles.length > 0) {
            // Save first role
            pm.environment.set("userRole", responseJson.roles[0].name);
            pm.environment.set("userRoleSlug", responseJson.roles[0].slug);

            // Save all roles as JSON string
            const roleNames = responseJson.roles.map(role => role.name).join(', ');
            pm.environment.set("userRoles", roleNames);
        }

        // Capture metadata
        if (responseJson.metadata) {
            pm.environment.set("emailVerified", responseJson.metadata.email_verified);

            if (responseJson.metadata.email_verified_at) {
                pm.environment.set("emailVerifiedAt", responseJson.metadata.email_verified_at);
            }
        }

        console.log("Login successful!");
        console.log("User:", responseJson.full_name);
        console.log("Email:", responseJson.email);
        console.log("Role:", responseJson.roles[0]?.name);
        console.log("Bearer Token configured!");

    } else {
        console.error("Authentication failed. Status:", pm.response.code);
        console.error("Response:", pm.response.text());
    }

    // Tests to validate response
    pm.test("Login successful", function () {
        pm.response.to.have.status(200);
    });

    pm.test("Tokens received", function () {
        const responseJson = pm.response.json();
        pm.expect(responseJson).to.have.property('auth');
        pm.expect(responseJson.auth).to.have.property('access_token');
        pm.expect(responseJson.auth).to.have.property('refresh_token');
    });

    pm.test("User information received", function () {
        const responseJson = pm.response.json();
        pm.expect(responseJson).to.have.property('id');
        pm.expect(responseJson).to.have.property('email');
        pm.expect(responseJson).to.have.property('roles');
    });

    pm.test("Bearer Token configured", function () {
        pm.expect(pm.environment.get("bearerToken")).to.not.be.undefined;
        pm.expect(pm.environment.get("accessToken")).to.not.be.undefined;
    });
    ```

    **Environment Variables Set by Script:**
    - `accessToken` / `bearerToken`: JWT access token for API authentication
    - `refreshToken`: JWT refresh token for token renewal
    - `userId`: User's unique identifier
    - `userEmail`: User's email address
    - `username`: User's username
    - `userFullName`: User's full name
    - `userRole` / `userRoleSlug`: Primary user role
    - `userRoles`: Comma-separated list of all user roles
    - `emailVerified`: Email verification status
    - `emailVerifiedAt`: Email verification timestamp

    **Usage in Subsequent Requests:**
    After running the login request with this script, use `{{bearerToken}}` in the Authorization header:
    ```
    Authorization: Bearer {{bearerToken}}
    ```

    ### 2. Session Authentication (Web Access)
    - **Login**: POST to `/login` with credentials
    - **Session**: Cookie-based session management
    - **Usage**: Automatically handled by browser

    ## Permission System

    The API uses a sophisticated RBAC system with the following format:
    - **Pattern**: `resource.action` (e.g., `users.read`, `folders.create`)
    - **Resources**: users, roles, permissions, clients, folders, tasks, hearings, files
    - **Actions**: list, read, create, update, delete
    - **Special Roles**: ROOT (full access), ADMIN (administrative access)

    ## Rate Limiting

    Different rate limits apply to different endpoint groups:
    - **Auth Endpoints**: 5 requests per minute
    - **Upload Endpoints**: 10 requests per hour
    - **API Endpoints**: 60 requests per minute
    - **Public Endpoints**: 30 requests per minute

    ## API Conventions

    ### Request Format
    - **Content-Type**: `application/json` (except file uploads: `multipart/form-data`)
    - **Pagination**: `?page=1&per_page=20` or `?page=1&perPage=20`
    - **Sorting**: `?sort_by=field&order=asc|desc` or `?sortBy=field&order=asc|desc`
    - **Searching**: `?search=term` for text search
    - **Filtering**: `?status=active&type=legal` for field filters

    ### Response Format
    - **Success**: HTTP 2xx with JSON body
    - **Errors**: HTTP 4xx/5xx with standardized error format
    - **Timestamps**: ISO 8601 format (e.g., `2024-01-01T00:00:00.000Z`)
    - **Database Fields**: snake_case naming convention
    - **Pagination Meta**: Included in list responses

    ### Error Response Format
    ```json
    {
      "errors": [
        {
          "message": "Error description",
          "field": "field_name",
          "rule": "validation_rule"
        }
      ]
    }
    ```

  contact:
    name: Yol Benício Support
    email: support@yolbenicio.com
  license:
    name: Proprietary
    url: https://yolbenicio.com/license

servers:
  - url: https://api.yolbenicio.com
    description: Production server
  - url: https://staging-api.yolbenicio.com
    description: Staging server
  - url: http://localhost:3333
    description: Local development server
  - url: http://127.0.0.1:3333
    description: Alternative local server

security:
  - bearerAuth: []

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Users
    description: User account management
  - name: Profile
    description: Current user profile and settings
  - name: Roles
    description: Role management (Admin only)
  - name: Permissions
    description: Permission management (Admin only)
  - name: Clients
    description: Client management
  - name: Folders
    description: Legal folder/case management
  - name: Tasks
    description: Task and to-do management
  - name: Hearings
    description: Hearing and appointment management
  - name: Files
    description: File upload and management
  - name: AI
    description: AI-powered document analysis and generation
  - name: Dashboard
    description: Dashboard widgets and analytics
  - name: Messages
    description: Internal messaging system
  - name: Notifications
    description: System notifications
  - name: Health
    description: System health monitoring

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT authentication token

  parameters:
    pageParam:
      in: query
      name: page
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number for pagination

    perPageParam:
      in: query
      name: per_page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Items per page

    searchParam:
      in: query
      name: search
      schema:
        type: string
      description: Search term

    sortByParam:
      in: query
      name: sort_by
      schema:
        type: string
      description: Field to sort by

    orderParam:
      in: query
      name: order
      schema:
        type: string
        enum: [asc, desc]
        default: asc
      description: Sort order

    idParam:
      in: path
      name: id
      required: true
      schema:
        type: integer
      description: Resource ID

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        full_name:
          type: string
          example: 'João Silva'
        email:
          type: string
          format: email
          example: 'joao@yolbenicio.com'
        username:
          type: string
          example: 'joaosilva'
        email_verified_at:
          type: ['string', 'null']
          format: date-time
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Role:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'admin'
        description:
          type: string
          example: 'System Administrator'
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time

    Permission:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'users.read'
        description:
          type: string
          example: 'Can read user data'
        resource:
          type: string
          example: 'users'
        action:
          type: string
          example: 'read'

    Client:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Maria Santos'
        email:
          type: string
          format: email
        phone:
          type: string
          example: '(11) 98765-4321'
        document:
          type: string
          example: '123.456.789-00'
        type:
          type: string
          enum: [individual, company]
        status:
          type: string
          enum: [active, inactive]
        address:
          type: object
          properties:
            street:
              type: string
            number:
              type: string
            complement:
              type: string
            neighborhood:
              type: string
            city:
              type: string
            state:
              type: string
            zip_code:
              type: string
        created_at:
          type: string
          format: date-time

    Folder:
      type: object
      properties:
        id:
          type: integer
          example: 1
        number:
          type: string
          example: 'PROC-2024-001'
        title:
          type: string
          example: 'Processo Trabalhista - João Silva'
        client_id:
          type: integer
        responsible_id:
          type: integer
        type:
          type: string
          enum: [civil, criminal, labor, tax, administrative]
        status:
          type: string
          enum: [active, archived, suspended, concluded]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        value:
          type: number
          format: float
          example: 50000.00
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object
        is_favorite:
          type: boolean
        created_at:
          type: string
          format: date-time

    Task:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
          example: 'Preparar petição inicial'
        description:
          type: string
        folder_id:
          type: ['integer', 'null']
        assigned_to:
          type: integer
        created_by:
          type: integer
        status:
          type: string
          enum: [pending, in_progress, completed, cancelled]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        due_date:
          type: string
          format: date-time
        completed_at:
          type: ['string', 'null']
          format: date-time
        tags:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time

    Hearing:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
          example: 'Audiência de Conciliação'
        folder_id:
          type: integer
        type:
          type: string
          enum: [conciliation, instruction, judgment, other]
        location:
          type: string
          example: 'Fórum Central - Sala 301'
        scheduled_at:
          type: string
          format: date-time
        duration_minutes:
          type: integer
          example: 60
        status:
          type: string
          enum: [scheduled, completed, cancelled, postponed]
        participants:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              role:
                type: string
              email:
                type: string
        notes:
          type: string
        reminder_sent:
          type: boolean
        created_at:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        id:
          type: integer
        from_user_id:
          type: integer
        to_user_id:
          type: integer
        subject:
          type: string
        content:
          type: string
        is_read:
          type: boolean
        read_at:
          type: ['string', 'null']
          format: date-time
        attachments:
          type: array
          items:
            type: object
        created_at:
          type: string
          format: date-time

    Notification:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        type:
          type: string
          enum: [info, warning, error, success, task, hearing, deadline]
        title:
          type: string
        message:
          type: string
        data:
          type: object
        is_read:
          type: boolean
        read_at:
          type: ['string', 'null']
          format: date-time
        created_at:
          type: string
          format: date-time

    AIAnalysis:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
          enum: [document_analysis, entity_extraction, classification, semantic_search, generation]
        input:
          type: object
        output:
          type: object
        model:
          type: string
        tokens_used:
          type: integer
        processing_time_ms:
          type: integer
        status:
          type: string
          enum: [pending, processing, completed, failed]
        error:
          type: ['string', 'null']
        created_at:
          type: string
          format: date-time

    PaginationMeta:
      type: object
      properties:
        total:
          type: integer
          example: 100
        per_page:
          type: integer
          example: 20
        current_page:
          type: integer
          example: 1
        last_page:
          type: integer
          example: 5
        first_page:
          type: integer
          example: 1
        first_page_url:
          type: string
        last_page_url:
          type: string
        next_page_url:
          type: ['string', 'null']
        previous_page_url:
          type: ['string', 'null']

    Error:
      type: object
      properties:
        message:
          type: string
          example: 'Validation error'
        field:
          type: string
          example: 'email'
        rule:
          type: string
          example: 'required'

    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'

  responses:
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errors:
              - message: 'Unauthorized access'

    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errors:
              - message: 'Insufficient permissions'

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errors:
              - message: 'Resource not found'

    ValidationError:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errors:
              - message: 'The email field must be a valid email'
                field: 'email'
                rule: 'email'

paths:
  # Authentication Endpoints
  /api/v1/sessions/sign-in:
    post:
      operationId: signIn
      tags: [Authentication]
      summary: User sign in
      description: Authenticate user and receive JWT tokens
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: 'user@example.com'
                password:
                  type: string
                  format: password
                  example: 'SecurePass123!'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  access_token:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIs...'
                  refresh_token:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIs...'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/v1/sessions/sign-up:
    post:
      operationId: signUp
      tags: [Authentication]
      summary: User registration
      description: Create a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [full_name, email, username, password]
              properties:
                full_name:
                  type: string
                  example: 'João Silva'
                email:
                  type: string
                  format: email
                  example: 'joao@example.com'
                username:
                  type: string
                  example: 'joaosilva'
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: 'SecurePass123!'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  access_token:
                    type: string
                  refresh_token:
                    type: string
        '422':
          $ref: '#/components/responses/ValidationError'

  /logout:
    post:
      operationId: logout
      tags: [Authentication]
      summary: User logout
      description: Invalidate current session/token
      responses:
        '200':
          description: Successfully logged out
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # User Profile Endpoints
  /api/v1/me:
    get:
      operationId: getCurrentUser
      tags: [Profile]
      summary: Get current user profile
      description: Returns the authenticated user's profile information
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/v1/me/permissions:
    get:
      operationId: getCurrentUserPermissions
      tags: [Profile]
      summary: Get current user permissions
      description: Returns all permissions assigned to the authenticated user
      responses:
        '200':
          description: User permissions list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/v1/me/roles:
    get:
      operationId: getCurrentUserRoles
      tags: [Profile]
      summary: Get current user roles
      description: Returns all roles assigned to the authenticated user
      responses:
        '200':
          description: User roles list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # User Management Endpoints
  /api/v1/users:
    get:
      operationId: listUsers
      tags: [Users]
      summary: List users
      description: Get paginated list of users (requires users.list permission)
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - $ref: '#/components/parameters/searchParam'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/orderParam'
      responses:
        '200':
          description: Users list with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      operationId: createUser
      tags: [Users]
      summary: Create user
      description: Create a new user account (requires users.create permission)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [full_name, email, username, password]
              properties:
                full_name:
                  type: string
                email:
                  type: string
                  format: email
                username:
                  type: string
                password:
                  type: string
                  format: password
                roles:
                  type: array
                  items:
                    type: integer
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/v1/users/{id}:
    get:
      operationId: getUserById
      tags: [Users]
      summary: Get user by ID
      description: Get specific user details (requires users.read permission)
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      operationId: updateUser
      tags: [Users]
      summary: Update user
      description: Update user information (requires users.update permission)
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                email:
                  type: string
                  format: email
                username:
                  type: string
                password:
                  type: string
                  format: password
                is_active:
                  type: boolean
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      operationId: deleteUser
      tags: [Users]
      summary: Delete user
      description: Delete a user account (requires users.delete permission)
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Client Management Endpoints
  /api/v1/clients:
    get:
      operationId: listClients
      tags: [Clients]
      summary: List clients
      description: Get paginated list of clients (requires clients.list permission)
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - $ref: '#/components/parameters/searchParam'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/orderParam'
        - in: query
          name: type
          schema:
            type: string
            enum: [individual, company]
          description: Filter by client type
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive]
          description: Filter by status
      responses:
        '200':
          description: Clients list with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Client'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      operationId: createClient
      tags: [Clients]
      summary: Create client
      description: Create a new client (requires clients.create permission)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, type]
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                document:
                  type: string
                type:
                  type: string
                  enum: [individual, company]
                status:
                  type: string
                  enum: [active, inactive]
                address:
                  type: object
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/v1/clients/search:
    get:
      operationId: searchClients
      tags: [Clients]
      summary: Search clients
      description: Search clients by name, email, or document (requires clients.read permission)
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
          description: Search query
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /api/v1/clients/{id}:
    get:
      operationId: getClientById
      tags: [Clients]
      summary: Get client by ID
      description: Get specific client details (requires clients.read permission)
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Client details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      operationId: updateClient
      tags: [Clients]
      summary: Update client
      description: Update client information (requires clients.update permission)
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                document:
                  type: string
                type:
                  type: string
                  enum: [individual, company]
                status:
                  type: string
                  enum: [active, inactive]
                address:
                  type: object
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      operationId: deleteClient
      tags: [Clients]
      summary: Delete client
      description: Delete a client (requires clients.delete permission)
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '204':
          description: Client deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Folder Management Endpoints
  /api/v1/folders:
    get:
      operationId: listFolders
      tags: [Folders]
      summary: List folders
      description: Get paginated list of legal folders/cases (requires folders.list permission)
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - $ref: '#/components/parameters/searchParam'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/orderParam'
        - in: query
          name: status
          schema:
            type: string
            enum: [active, archived, suspended, concluded]
        - in: query
          name: type
          schema:
            type: string
            enum: [civil, criminal, labor, tax, administrative]
        - in: query
          name: priority
          schema:
            type: string
            enum: [low, medium, high, urgent]
      responses:
        '200':
          description: Folders list with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Folder'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      operationId: createFolder
      tags: [Folders]
      summary: Create folder
      description: Create a new legal folder/case (requires folders.create permission)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [number, title, client_id, type, status]
              properties:
                number:
                  type: string
                title:
                  type: string
                client_id:
                  type: integer
                responsible_id:
                  type: integer
                type:
                  type: string
                  enum: [civil, criminal, labor, tax, administrative]
                status:
                  type: string
                  enum: [active, archived, suspended, concluded]
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
                value:
                  type: number
                description:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Folder created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/v1/folders/{id}:
    get:
      operationId: getFolderById
      tags: [Folders]
      summary: Get folder by ID
      description: Get specific folder details (requires folders.read permission)
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Folder details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      operationId: updateFolder
      tags: [Folders]
      summary: Update folder
      description: Update folder information (requires folders.update permission)
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                client_id:
                  type: integer
                responsible_id:
                  type: integer
                type:
                  type: string
                  enum: [civil, criminal, labor, tax, administrative]
                status:
                  type: string
                  enum: [active, archived, suspended, concluded]
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
                value:
                  type: number
                description:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Folder updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      operationId: deleteFolder
      tags: [Folders]
      summary: Delete folder
      description: Delete a folder (requires folders.delete permission)
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '204':
          description: Folder deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/v1/folders/{id}/favorite:
    patch:
      operationId: toggleFolderFavorite
      tags: [Folders]
      summary: Toggle folder favorite
      description: Toggle folder favorite status (requires folders.update permission)
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Favorite status toggled
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_favorite:
                    type: boolean
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Task Management Endpoints
  /api/v1/tasks:
    get:
      operationId: listTasks
      tags: [Tasks]
      summary: List tasks
      description: Get list of tasks (requires tasks.read permission)
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, in_progress, completed, cancelled]
        - in: query
          name: priority
          schema:
            type: string
            enum: [low, medium, high, urgent]
        - in: query
          name: assigned_to
          schema:
            type: integer
      responses:
        '200':
          description: Tasks list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      operationId: createTask
      tags: [Tasks]
      summary: Create task
      description: Create a new task (requires tasks.create permission)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, status, priority]
              properties:
                title:
                  type: string
                description:
                  type: string
                folder_id:
                  type: integer
                assigned_to:
                  type: integer
                status:
                  type: string
                  enum: [pending, in_progress, completed, cancelled]
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
                due_date:
                  type: string
                  format: date-time
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/v1/tasks/{id}:
    get:
      operationId: getTaskById
      tags: [Tasks]
      summary: Get task by ID
      description: Get specific task details (requires tasks.read permission)
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      operationId: updateTask
      tags: [Tasks]
      summary: Update task
      description: Update task information (requires tasks.update permission)
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                folder_id:
                  type: integer
                assigned_to:
                  type: integer
                status:
                  type: string
                  enum: [pending, in_progress, completed, cancelled]
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
                due_date:
                  type: string
                  format: date-time
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      operationId: deleteTask
      tags: [Tasks]
      summary: Delete task
      description: Delete a task (requires tasks.delete permission)
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '204':
          description: Task deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/v1/tasks/{id}/status:
    patch:
      operationId: updateTaskStatus
      tags: [Tasks]
      summary: Update task status
      description: Update only the task status (requires tasks.update permission)
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [pending, in_progress, completed, cancelled]
      responses:
        '200':
          description: Task status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'

  # Hearing Management Endpoints
  /api/v1/hearings:
    get:
      operationId: listHearings
      tags: [Hearings]
      summary: List hearings
      description: Get list of hearings (requires hearings.read permission)
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - in: query
          name: status
          schema:
            type: string
            enum: [scheduled, completed, cancelled, postponed]
        - in: query
          name: type
          schema:
            type: string
            enum: [conciliation, instruction, judgment, other]
        - in: query
          name: from_date
          schema:
            type: string
            format: date
        - in: query
          name: to_date
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Hearings list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Hearing'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      operationId: createHearing
      tags: [Hearings]
      summary: Create hearing
      description: Schedule a new hearing (requires hearings.create permission)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, folder_id, type, scheduled_at]
              properties:
                title:
                  type: string
                folder_id:
                  type: integer
                type:
                  type: string
                  enum: [conciliation, instruction, judgment, other]
                location:
                  type: string
                scheduled_at:
                  type: string
                  format: date-time
                duration_minutes:
                  type: integer
                participants:
                  type: array
                  items:
                    type: object
                notes:
                  type: string
      responses:
        '201':
          description: Hearing created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hearing'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '422':
          $ref: '#/components/responses/ValidationError'

  # File Management Endpoints
  /api/v1/files/upload:
    post:
      operationId: uploadFiles
      tags: [Files]
      summary: Upload files
      description: Upload one or more files (requires files.create permission, max 5MB per file)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [files]
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                folder_id:
                  type: integer
                  description: Optional folder to associate files with
                category:
                  type: string
                  enum: [document, image, contract, petition, other]
      responses:
        '201':
          description: Files uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        filename:
                          type: string
                        size:
                          type: integer
                        mime_type:
                          type: string
                        url:
                          type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '413':
          description: File too large
        '422':
          $ref: '#/components/responses/ValidationError'

  # AI Endpoints
  /api/v1/ai/analyze-document:
    post:
      operationId: analyzeDocument
      tags: [AI]
      summary: Analyze document with AI
      description: Perform AI analysis on a document
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [document_text]
              properties:
                document_text:
                  type: string
                  description: Text content of the document
                analysis_type:
                  type: string
                  enum: [summary, key_points, risks, recommendations]
                  default: summary
      responses:
        '200':
          description: Analysis results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIAnalysis'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  # Dashboard Endpoints
  /api/dashboard:
    get:
      operationId: getDashboardData
      tags: [Dashboard]
      summary: Get complete dashboard data
      description: Get all dashboard widgets data in a single request
      responses:
        '200':
          description: Dashboard data
          content:
            application/json:
              schema:
                type: object
                properties:
                  active_folders:
                    type: object
                  area_division:
                    type: object
                  folder_activity:
                    type: object
                  requests:
                    type: object
                  billing:
                    type: object
                  hearings:
                    type: object
                  birthdays:
                    type: object
                  tasks:
                    type: object
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Messages Endpoints
  /api/messages:
    get:
      operationId: listMessages
      tags: [Messages]
      summary: List messages
      description: Get user messages
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - in: query
          name: folder
          schema:
            type: string
            enum: [inbox, sent, archived]
      responses:
        '200':
          description: Messages list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      operationId: sendMessage
      tags: [Messages]
      summary: Send message
      description: Send a new message to another user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [to_user_id, subject, content]
              properties:
                to_user_id:
                  type: integer
                subject:
                  type: string
                content:
                  type: string
                attachments:
                  type: array
                  items:
                    type: integer
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  # Notifications Endpoints
  /api/notifications:
    get:
      operationId: listNotifications
      tags: [Notifications]
      summary: List notifications
      description: Get user notifications
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - in: query
          name: unread_only
          schema:
            type: boolean
      responses:
        '200':
          description: Notifications list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Health Check Endpoints
  /health:
    get:
      operationId: healthCheck
      tags: [Health]
      summary: Basic health check
      description: Check if the API is responding
      security: []
      responses:
        '200':
          description: Service is healthy
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'ok'

  /health/ready:
    get:
      operationId: readinessProbe
      tags: [Health]
      summary: Readiness probe
      description: Check if the API is ready to serve requests
      security: []
      responses:
        '200':
          description: Service is ready
        '503':
          description: Service not ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'ready'
                  database:
                    type: string
                    example: 'connected'
                  redis:
                    type: string
                    example: 'connected'

  /health/live:
    get:
      operationId: livenessProbe
      tags: [Health]
      summary: Liveness probe
      description: Check if the API process is alive
      security: []
      responses:
        '200':
          description: Service is alive
        '503':
          description: Service not alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'alive'
                  uptime:
                    type: integer
                    example: 3600
